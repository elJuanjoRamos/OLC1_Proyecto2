/* parser generated by jison 0.0.0 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,19],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,21],$Vb=[1,22],$Vc=[1,28],$Vd=[1,20],$Ve=[1,23],$Vf=[1,24],$Vg=[1,26],$Vh=[1,27],$Vi=[1,25],$Vj=[2,5,19,21,22,29,31,36,37,38,39,40,41,42,58,60,64,65,66,75,82],$Vk=[1,40],$Vl=[1,49],$Vm=[1,50],$Vn=[1,41],$Vo=[1,44],$Vp=[1,42],$Vq=[1,43],$Vr=[1,45],$Vs=[1,46],$Vt=[1,47],$Vu=[1,48],$Vv=[1,56],$Vw=[1,59],$Vx=[2,18],$Vy=[1,66],$Vz=[1,67],$VA=[1,68],$VB=[1,69],$VC=[1,70],$VD=[1,71],$VE=[1,72],$VF=[1,73],$VG=[1,74],$VH=[1,75],$VI=[1,76],$VJ=[1,77],$VK=[2,5,19,20,21,22,29,31,36,37,38,39,40,41,42,46,49,58,60,64,65,66,71,72,73,75,79,82,89,90,91,92,93,94,95,97,98],$VL=[1,84],$VM=[1,83],$VN=[1,85],$VO=[1,109],$VP=[1,106],$VQ=[1,107],$VR=[1,108],$VS=[1,111],$VT=[2,5,19,20,21,22,29,31,36,37,38,39,40,41,42,46,49,58,60,64,65,66,71,72,75,79,82,90,91,92,93,94,95,97,98],$VU=[2,64],$VV=[1,140],$VW=[2,72],$VX=[1,144],$VY=[2,5,19,21,22,29,31,36,37,38,39,40,41,42,58,60,63,64,65,66,75,82],$VZ=[2,19,21,22,29,31,36,37,38,39,40,41,42,60,64,65,66,75,82],$V_=[1,161],$V$=[2,5,19,20,21,22,29,31,36,37,38,39,40,41,42,46,49,58,60,64,65,66,75,79,82,90,91,92,93,94,95,97,98],$V01=[2,5,19,20,21,22,29,31,36,37,38,39,40,41,42,46,49,58,60,64,65,66,75,79,82,92,95,97,98],$V11=[2,5,19,20,21,22,29,31,36,37,38,39,40,41,42,58,60,64,65,66,75,82],$V21=[2,5,19,20,21,22,29,31,36,37,38,39,40,41,42,49,58,60,64,65,66,75,82],$V31=[2,67],$V41=[1,192];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONS":4,"EOF":5,"DECLARATION_TYPE":6,"INSTRUCCIONS2":7,"DECLARATION_TYPE_FUNCTION":8,"DECLARATION":9,"ASIGNATION":10,"IF":11,"COMMENTS":12,"WHILE":13,"DOWHILE":14,"PRINT":15,"FOR":16,"SWITCH":17,"VOID_METHOD":18,"continue":19,";":20,"break":21,"return":22,"RETURN":23,"DECLARATION2":24,"ASIGNATION3":25,"CLASS":26,"IMPORT":27,"class":28,"identifier":29,"{":30,"}":31,"EXPRESION":32,"MORE_IMPORT":33,"import":34,"TYPE":35,"int":36,"String":37,"boolean":38,"char":39,"double":40,"linecomment":41,"multilinecomment":42,"VALUE":43,"(":44,"PARAMETERS":45,")":46,"=":47,"MORE_VALUES":48,",":49,"MORE_ELEMENTS":50,"FUNCTION_PARAMETERS":51,"ASIGNATION2":52,"MORE_ELEMENTS2":53,"PARAMETER":54,"MORE_PARAMETER":55,"FUNCTION_PARAMETER":56,"MORE_FUNCTION_PARAMETER":57,"void":58,"main":59,"if":60,"IF_CONDITION":61,"INSTRUCCIONS_BLOCK":62,"else":63,"while":64,"do":65,"for":66,"TYPE_FOR":67,"INCREMENT_DECREMENT":68,"ASIGNATION_FOR":69,"DECLARATION_FOR":70,"+":71,"-":72,"*":73,"number":74,"switch":75,"CASE":76,"DEFAULT":77,"case":78,":":79,"MORE_CASES":80,"default":81,"System":82,".":83,"out":84,"TYPE_PRINT":85,"print":86,"println":87,"CALL_FUNCTION":88,"/":89,">=":90,"<":91,"==":92,">":93,"<=":94,"!=":95,"!":96,"||":97,"&&":98,"decimal":99,"true":100,"false":101,"STRING_LITERAL":102,"char_literal":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"continue",20:";",21:"break",22:"return",28:"class",29:"identifier",30:"{",31:"}",34:"import",36:"int",37:"String",38:"boolean",39:"char",40:"double",41:"linecomment",42:"multilinecomment",44:"(",46:")",47:"=",49:",",58:"void",59:"main",60:"if",63:"else",64:"while",65:"do",66:"for",71:"+",72:"-",73:"*",74:"number",75:"switch",78:"case",79:":",81:"default",82:"System",83:".",84:"out",86:"print",87:"println",89:"/",90:">=",91:"<",92:"==",93:">",94:"<=",95:"!=",96:"!",97:"||",98:"&&",99:"decimal",100:"true",101:"false",102:"STRING_LITERAL",103:"char_literal"},
productions_: [0,[3,0],[3,2],[4,2],[4,1],[7,2],[7,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[8,2],[8,2],[8,2],[26,6],[23,2],[23,1],[27,4],[33,1],[33,0],[35,1],[35,1],[35,1],[35,1],[35,1],[12,1],[12,1],[9,3],[9,8],[24,3],[43,3],[43,1],[43,2],[48,1],[48,3],[10,4],[10,5],[25,4],[50,2],[53,2],[53,0],[52,3],[52,1],[45,1],[45,0],[54,3],[55,4],[55,0],[51,1],[56,2],[56,0],[57,3],[57,0],[18,8],[18,8],[11,3],[11,5],[11,5],[61,3],[62,3],[62,2],[13,3],[14,5],[16,9],[67,1],[67,1],[70,4],[69,3],[68,3],[68,3],[68,4],[17,6],[76,7],[80,1],[80,0],[77,3],[15,5],[85,5],[85,5],[88,5],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,3],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = ''; console.log("empty"); 
break;
case 2:
this.$ = new Tree($$[$0-1]); return this.$;
break;
case 3: case 5:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: case 6:
 this.$ = [$$[$0]]; 
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 68: case 84: case 85:
this.$ = $$[$0];
break;
case 17: case 30:
this.$ = new Continue($$[$0-1], _$.first_line, _$.first_column);
break;
case 18: case 31:
this.$ = new Break($$[$0-1], _$.first_line, _$.first_column);
break;
case 19: case 32:
this.$ = new Return( $$[$0-1], $$[$0], _$.first_line, _$.first_column);
break;
case 20: case 33:
this.$ = new Return( null, null, _$.first_line, _$.first_column);
break;
case 34:
this.$ = new Class($$[$0-3], $$[$0-2], $$[$0-5]);
break;
case 35: case 78: case 79:
this.$ = $$[$0-1];
break;
case 36: case 80: case 90:
this.$ = [];
break;
case 37:
this.$ = new Import($$[$0-2],  _$.first_line, _$.first_column);
break;
case 40:
this.$ = new DataType('int');
break;
case 41:
this.$ = new DataType('string');
break;
case 42:
this.$ = new DataType('boolean');
break;
case 43:
this.$ = new DataType('char');
break;
case 44:
this.$ = new DataType('double');
break;
case 45:
this.$ = new Comment('Line', _$.first_line, _$.first_column);
break;
case 46:
this.$ = new Comment('Multi line', _$.first_line, _$.first_column);
break;
case 47: case 49:
this.$ = new Declaration($$[$0-2], $$[$0-1], $$[$0], $$[$0-2].first_line, _$.first_column);
break;
case 48:
this.$ = new Function($$[$0-7], $$[$0-6], [$$[$0-4]], $$[$0-1], _$.first_line, _$.first_column);
break;
case 50:
this.$ = $$[$0-1]
break;
case 51: case 52: case 64: case 70:
this.$ = null;
break;
case 55: case 57:
this.$ = new Assignation($$[$0-3], $$[$0-1], _$.first_line, _$.first_column);
break;
case 56:
this.$ = new CallFunction($$[$0-4], [$$[$0-2]], _$.first_line, _$.first_column);
break;
case 61: case 87:
this.$ = new Assignation($$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 62:
this.$ = new Assignation($$[$0], null, _$.first_line, _$.first_column);
break;
case 65:
this.$ = new Declaration($$[$0-2], $$[$0-1], null, _$.first_line, _$.first_column);
break;
case 69:
this.$ = new Identifier($$[$0-1], _$.first_line, _$.first_column);
break;
case 73:
this.$ = new Function('void', 'main', [$$[$0-4]], $$[$0-2], _$.first_line, _$.first_column);
break;
case 74:
this.$ = new Function('void', $$[$0-6], [$$[$0-4]], $$[$0-2], _$.first_line, _$.first_column);
break;
case 75:
this.$ = new If($$[$0-1], $$[$0], [], _$.first_line, _$.first_column);
break;
case 76:
this.$ = new If($$[$0-3], $$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 77:
this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]], _$.first_line, _$.first_column);
break;
case 81:
this.$ = new While($$[$0-1], $$[$0], _$.first_line, _$.first_column);
break;
case 82:
this.$ = new DoWhile($$[$0-3], $$[$0-1], _$.first_line, _$.first_column);
break;
case 83:
this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 86:
this.$ = new Declaration($$[$0-3], $$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 88:
this.$ = new Increment($$[$0-2], $$[$0-1], $$[$0], _$.first_line, _$.first_column);
break;
case 89:
this.$ = new Decrement($$[$0-2], $$[$0-1], $$[$0], _$.first_line, _$.first_column);
break;
case 91:
this.$ = new Switch($$[$0-4], [$$[$0-2]], $$[$0-1], _$.first_line, _$.first_column);
break;
case 92:
this.$ = new Case($$[$0-5], $$[$0-3], _$.first_line, _$.first_column);
break;
case 95:
this.$ = new Default($$[$0], _$.first_line, _$.first_column);
break;
case 97: case 98:
this.$ = new Print($$[$0-2], _$.first_line, _$.first_column);
break;
case 100:
 this.$ = new ArithmeticExpression($$[$0-1], null, '-', _$.first_line, _$.first_column); 
break;
case 101:
 this.$ = new ArithmeticExpression($$[$0-2], $$[$0], '+', _$.first_line, _$.first_column); 
break;
case 102:
 this.$ = new ArithmeticExpression($$[$0-2], $$[$0], '-', _$.first_line, _$.first_column); 
break;
case 103:
 this.$ = new ArithmeticExpression($$[$0-2], $$[$0], '*', _$.first_line, _$.first_column); 
break;
case 104:
 this.$ = new ArithmeticExpression($$[$0-2], $$[$0], '/', _$.first_line, _$.first_column); 
break;
case 105:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '>=', _$.first_line, _$.first_column); 
break;
case 106:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '<', _$.first_line, _$.first_column); 
break;
case 107:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '==', _$.first_line, _$.first_column); 
break;
case 108:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '>', _$.first_line, _$.first_column); 
break;
case 109:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '<=', _$.first_line, _$.first_column); 
break;
case 110:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '!=', _$.first_line, _$.first_column); 
break;
case 111:
 this.$ = new LogicExpression($$[$0], null, '!', _$.first_line, _$.first_column); 
break;
case 112:
 this.$ = new LogicExpression($$[$0-2], $$[$0], '&&', _$.first_line, _$.first_column); 
break;
case 113:
 this.$ = new LogicExpression($$[$0-2], $$[$0], '||', _$.first_line, _$.first_column); 
break;
case 114: case 115:
 this.$ = new Expression(new DataType('int'), Number($$[$0]), _$.first_line, _$.first_column); 
break;
case 116:
 this.$ = new Expression(new DataType('boolean'), true, _$.first_line, _$.first_column); 
break;
case 117:
 this.$ = new Expression(new DataType('boolean'), false, _$.first_line, _$.first_column); 
break;
case 118:
 this.$ = new Expression(new DataType('string'), $$[$0].replace(/\"/g,""), _$.first_line, _$.first_column); 
break;
case 119:
 this.$ = new Expression(new DataType('char'), $$[$0].replace(/\'/g,""), _$.first_line, _$.first_column); 
break;
case 120:
 this.$ = new Identifier($$[$0], _$.first_line, _$.first_column); 
break;
case 121:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{1:[2,1],2:$V0,3:1,4:2,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:$V1,21:$V2,22:$V3,29:$V4,35:18,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,58:$Vc,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},{1:[3]},{2:$V0,5:[1,34],6:35,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:$V1,21:$V2,22:$V3,29:$V4,35:18,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,58:$Vc,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},o($Vj,[2,4]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),{20:[1,36]},{20:[1,37]},{20:$Vk,23:38,29:$Vl,32:39,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{20:[1,51]},{29:[1,52]},{44:[1,54],47:[1,53]},{44:$Vv,61:55},o($Vj,[2,45]),o($Vj,[2,46]),{44:$Vv,61:57},{30:$Vw,62:58},{83:[1,60]},{44:[1,61]},{44:$Vv,61:62},{29:[1,64],59:[1,63]},{29:[2,40]},{29:[2,41]},{29:[2,42]},{29:[2,43]},{29:[2,44]},{1:[2,2]},o($Vj,[2,3]),o($Vj,[2,17]),o($Vj,$Vx),o($Vj,[2,19]),{20:[1,65],71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,97:$VI,98:$VJ},o($Vj,[2,36]),{29:$Vl,32:78,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:79,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o($VK,[2,114]),o($VK,[2,115]),o($VK,[2,116]),o($VK,[2,117]),o($VK,[2,118]),o($VK,[2,119]),o($VK,[2,120]),{29:$Vl,32:80,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o($Vj,[2,20]),{20:$VL,43:81,44:[1,82],47:$VM,49:$VN},{29:$Vl,32:86,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:[1,89],46:[2,70],51:87,56:88},{30:$Vw,62:90},{29:$Vl,32:91,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{30:$Vw,62:92},{64:[1,93]},{2:$VO,7:94,8:96,11:99,12:100,13:101,14:102,15:103,16:104,17:105,19:$VP,21:$VQ,22:$VR,24:97,25:98,29:$VS,31:[1,95],35:110,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},{84:[1,112]},{29:[1,116],35:117,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,67:113,69:114,70:115},{30:[1,118]},{44:[1,119]},{44:[1,120]},o($Vj,[2,35]),{29:$Vl,32:121,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:122,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:123,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:124,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:125,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:126,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:127,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:128,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:129,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:130,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:131,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:132,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o($VT,[2,100],{73:$VA,89:$VB}),o($VK,[2,111]),{46:[1,133],71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,97:$VI,98:$VJ},o($Vj,[2,47]),{35:136,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,45:134,46:$VU,54:135},{29:$Vl,32:137,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o($Vj,[2,51]),{29:$VV,50:138,52:139},{20:[1,141],71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,97:$VI,98:$VJ},{46:[1,142]},{46:[2,68]},{46:$VW,49:$VX,57:143},o($Vj,[2,75],{63:[1,145]}),{46:[1,146],71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,97:$VI,98:$VJ},o($Vj,[2,81]),{44:$Vv,61:147},{2:$VO,8:149,11:99,12:100,13:101,14:102,15:103,16:104,17:105,19:$VP,21:$VQ,22:$VR,24:97,25:98,29:$VS,31:[1,148],35:110,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},o($VY,[2,80]),o($VZ,[2,6]),o($VZ,[2,21]),o($VZ,[2,22]),o($VZ,[2,23]),o($VZ,[2,24]),o($VZ,[2,25]),o($VZ,[2,26]),o($VZ,[2,27]),o($VZ,[2,28]),o($VZ,[2,29]),{20:[1,150]},{20:[1,151]},{20:$Vk,23:152,29:$Vl,32:39,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{20:[1,153]},{29:[1,154]},{47:[1,155]},{83:[1,156]},{20:[1,157]},{20:[2,84]},{20:[2,85]},{47:[1,158]},{29:[1,159]},{76:160,78:$V_},{35:136,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,45:162,46:$VU,54:135},{35:136,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,45:163,46:$VU,54:135},o($VT,[2,101],{73:$VA,89:$VB}),o($VT,[2,102],{73:$VA,89:$VB}),o($VK,[2,103]),o($VK,[2,104]),o($V$,[2,105],{71:$Vy,72:$Vz,73:$VA,89:$VB}),o($V$,[2,106],{71:$Vy,72:$Vz,73:$VA,89:$VB}),o($V01,[2,107],{71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,93:$VF,94:$VG}),o($V$,[2,108],{71:$Vy,72:$Vz,73:$VA,89:$VB}),o($V$,[2,109],{71:$Vy,72:$Vz,73:$VA,89:$VB}),o($V01,[2,110],{71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,93:$VF,94:$VG}),o([2,5,19,20,21,22,29,31,36,37,38,39,40,41,42,46,49,58,60,64,65,66,75,79,82,97],[2,112],{71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,98:$VJ}),o([2,5,19,20,21,22,29,31,36,37,38,39,40,41,42,46,49,58,60,64,65,66,75,79,82,97,98],[2,113],{71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH}),o($VK,[2,121]),{46:[1,164]},{46:[2,63]},{29:[1,165]},{20:[1,167],48:166,49:[1,168],71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,97:$VI,98:$VJ},o($Vj,[2,52]),o($V11,[2,60],{53:169,49:[1,170]}),o($V21,[2,62],{47:[1,171]}),o($Vj,[2,55]),{20:[1,172]},{46:[2,69]},{29:[1,173]},{11:175,30:$Vw,60:$Vd,62:174},o([20,30],[2,78]),{20:[1,176]},o($VY,[2,79]),o($VZ,[2,5]),o($VZ,[2,30]),o($VZ,[2,31]),o($VZ,[2,32]),o($VZ,[2,33]),{20:$VL,43:177,47:$VM,49:$VN},{29:$Vl,32:178,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{85:179,86:[1,180],87:[1,181]},{29:$Vl,32:182,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:183,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{47:[1,184]},{77:185,81:[1,186]},{29:$Vl,32:187,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{46:[1,188]},{46:[1,189]},{30:[1,190]},{46:$V31,49:$V41,55:191},o($Vj,[2,50]),o($Vj,[2,53]),{29:$VV,50:193,52:139},o($V11,[2,58]),{29:$VV,50:194,52:139},{29:$Vl,32:195,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},o($Vj,[2,56]),{46:$VW,49:$VX,57:196},o($Vj,[2,76]),o($Vj,[2,77]),o($Vj,[2,82]),o($VZ,[2,49]),{20:[1,197],71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,97:$VI,98:$VJ},o($Vj,[2,96]),{44:[1,198]},{44:[1,199]},{20:[1,200],71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,97:$VI,98:$VJ},{20:[2,87],71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,97:$VI,98:$VJ},{29:$Vl,32:201,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{31:[1,202]},{79:[1,203]},{71:$Vy,72:$Vz,73:$VA,79:[1,204],89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,97:$VI,98:$VJ},{30:[1,205]},{30:[1,206]},{2:$V0,4:207,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:$V1,21:$V2,22:$V3,29:$V4,35:18,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,58:$Vc,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},{46:[2,65]},{35:208,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9},{20:[1,209]},o($V11,[2,59]),o($V21,[2,61],{71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,97:$VI,98:$VJ}),{46:[2,71]},o($VZ,[2,57]),{29:$Vl,32:210,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:$Vl,32:211,44:$Vm,72:$Vn,74:$Vo,96:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu},{29:[1,213],68:212},{20:[2,86],71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,97:$VI,98:$VJ},o($Vj,[2,91]),{2:$V0,4:214,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:$V1,21:$V2,22:$V3,29:$V4,35:18,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,58:$Vc,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},{2:$V0,4:215,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:$V1,21:$V2,22:$V3,29:$V4,35:18,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,58:$Vc,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},{2:$V0,4:216,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:$V1,21:$V2,22:$V3,29:$V4,35:18,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,58:$Vc,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},{2:$V0,4:217,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:$V1,21:$V2,22:$V3,29:$V4,35:18,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,58:$Vc,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},{2:$V0,6:35,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:$V1,21:$V2,22:$V3,29:$V4,31:[1,218],35:18,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,58:$Vc,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},{29:[1,219]},o($Vj,[2,54]),{46:[1,220],71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,97:$VI,98:$VJ},{46:[1,221],71:$Vy,72:$Vz,73:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,97:$VI,98:$VJ},{46:[1,222]},{71:[1,223],72:[1,224],73:[1,225]},{2:$V0,6:35,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:$V1,21:$V2,22:$V3,29:$V4,31:[2,95],35:18,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,58:$Vc,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},{2:$V0,6:35,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:$V1,21:[1,226],22:$V3,29:$V4,35:18,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,58:$Vc,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},{2:$V0,6:35,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:$V1,21:$V2,22:$V3,29:$V4,31:[1,227],35:18,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,58:$Vc,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},{2:$V0,6:35,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:$V1,21:$V2,22:$V3,29:$V4,31:[1,228],35:18,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,58:$Vc,60:$Vd,64:$Ve,65:$Vf,66:$Vg,75:$Vh,82:$Vi},o($Vj,[2,48]),{46:$V31,49:$V41,55:229},{20:[1,230]},{20:[1,231]},{30:$Vw,62:232},{71:[1,233]},{72:[1,234]},{72:[1,235]},{20:[1,236]},o($Vj,[2,73]),o($Vj,[2,74]),{46:[2,66]},o($Vj,[2,97]),o($Vj,[2,98]),o($Vj,[2,83]),{46:[2,88]},{46:[2,89]},{74:[1,237]},o([2,19,21,22,29,36,37,38,39,40,41,42,58,60,64,65,66,75,82],$Vx,{80:238,76:239,78:$V_,81:[2,94]}),{46:[2,90]},{81:[2,92]},{81:[2,93]}],
defaultActions: {29:[2,40],30:[2,41],31:[2,42],32:[2,43],33:[2,44],34:[2,2],88:[2,68],114:[2,84],115:[2,85],135:[2,63],143:[2,69],191:[2,65],196:[2,71],229:[2,66],233:[2,88],234:[2,89],237:[2,90],238:[2,92],239:[2,93]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Tree}                    = require('./components/Tree');
    const {DataType}                = require('./components/DataType');
    const {Declaration}             = require('./components/Declaration');
    const {Assignation}             = require('./components/Assignation');
    const {Expression}              = require('./components/Expression');
    const {Class}                   = require('./components/Class');
    const {Import}                  = require('./components/Import');
    const {If}                      = require('./components/If');
    const {Identifier}              = require('./components/Identifier');
    const {Switch}                  = require('./components/Switch');
    const {Case}                    = require('./components/Case');
    const {Default}                 = require('./components/Default');
    const {While}                   = require('./components/While');
    const {DoWhile}                 = require('./components/DoWhile');
    const {For}                     = require('./components/For');
    const {Increment}               = require('./components/Increment');
    const {Decrement}               = require('./components/Decrement');
    const {Break}                   = require('./components/Break');
    const {Continue}                = require('./components/Continue');
    const {Return}                  = require('./components/Return');
    const {Comment}                 = require('./components/Comment');
    const {Function}                = require('./components/Function');
    const {Print}                   = require('./components/Print');
    const {CallFunction}            = require('./components/CallFunction');
    const {ArithmeticExpression}    = require('./components/ArithmeticExpression');
    const {LogicExpression}         = require('./components/LogicExpression');
    const {RelationalExpression}    = require('./components/RelationalExpression');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 74 
break;
case 2:return 99 
break;
case 3:return 102
break;
case 4:return 42
break;
case 5:return 103
break;
case 6:return 41
break;
case 7:return 73
break;
case 8:return 89
break;
case 9:return 20
break;
case 10:return 79
break;
case 11:return 83
break;
case 12:return 72
break;
case 13:return 71
break;
case 14:return 73
break;
case 15:return 91
break;
case 16:return 93
break;
case 17:return 94
break;
case 18:return 90
break;
case 19:return 92
break;
case 20:return 95
break;
case 21:return 97
break;
case 22:return 98
break;
case 23:return 96
break;
case 24:return 47
break;
case 25:return 49
break;
case 26:return 44
break;
case 27:return 46  
break;
case 28:return '['
break;
case 29:return ']'
break;
case 30:return 30
break;
case 31:return 31
break;
case 32:return 34
break;
case 33:return 28
break;
case 34:return 82  
break;
case 35:return 84  
break;
case 36:return 87  
break;
case 37:return 66  
break;
case 38:return 100
break;
case 39:return 101
break;
case 40:return 86
break;
case 41:return 59
break;
case 42:return 60
break;
case 43:return 63
break;
case 44:return 21
break;
case 45:return 19
break;
case 46:return 22
break;
case 47:return 75
break;
case 48:return 81
break;
case 49:return 78
break;
case 50:return 58  
break;
case 51:return 65
break;
case 52:return 64
break;
case 53:return 36
break;
case 54:return 37
break;
case 55:return 38
break;
case 56:return 39
break;
case 57:return 40
break;
case 58:return 29
break;
case 59:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:([0-9]+))/i,/^(?:([0-9]+\.[0-9]+))/i,/^(?:(("[^"]*")))/i,/^(?:(\/\*(.|\n|\r)*?\*\/))/i,/^(?:(('[^"]*')))/i,/^(?:(\/\/(.|(([a-zA-Z_])[a-zA-Z0-9_]*)|{NUMBER}|([0-9]+\.[0-9]+))*?))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:import\b)/i,/^(?:class\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:println\b)/i,/^(?:for\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:void\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:int\b)/i,/^(?:String\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}