/* parser generated by jison 0.0.0 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[2,41],$V2=[1,18],$V3=[1,35],$V4=[1,29],$V5=[1,30],$V6=[1,31],$V7=[1,32],$V8=[1,33],$V9=[1,20],$Va=[1,21],$Vb=[1,27],$Vc=[1,19],$Vd=[1,22],$Ve=[1,23],$Vf=[1,25],$Vg=[1,26],$Vh=[1,24],$Vi=[2,5,28,33,34,40,42,43,44,45,46,47,48,62,64,68,69,70,79,87],$Vj=[1,42],$Vk=[2,5,23,25,26,28,33,34,40,42,43,44,45,46,47,48,62,64,68,69,70,79,87],$Vl=[1,45],$Vm=[33,40],$Vn=[2,57],$Vo=[1,56],$Vp=[1,57],$Vq=[1,69],$Vr=[1,67],$Vs=[1,68],$Vt=[1,61],$Vu=[1,59],$Vv=[1,60],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[1,66],$VB=[1,90],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,92],$VG=[2,68],$VH=[1,110],$VI=[1,114],$VJ=[1,116],$VK=[1,117],$VL=[1,118],$VM=[1,119],$VN=[1,120],$VO=[1,121],$VP=[1,122],$VQ=[1,123],$VR=[1,124],$VS=[1,125],$VT=[1,126],$VU=[24,29,53,75,76,77,85,97,98,99,100,101,102,104,105],$VV=[2,5,23,25,26,28,33,34,40,42,43,44,45,46,47,48,62,64,67,68,69,70,79,87],$VW=[2,23,25,26,28,34,42,43,44,45,46,47,48,64,68,69,70,79,87],$VX=[1,139],$VY=[1,150],$VZ=[29,42,43,44,45,46,53],$V_=[24,53],$V$=[2,29],$V01=[1,185],$V11=[1,186],$V21=[84,86],$V31=[24,29,53,75,76,85,99,100,101,102,104,105],$V41=[24,29,53,85,99,100,101,102,104,105],$V51=[24,29,53,85,101,102,104,105],$V61=[29,34,53],$V71=[2,104];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONS":4,"EOF":5,"DECLARATION_TYPE":6,"INSTRUCCIONS2":7,"DECLARATION_TYPE_FUNCTION":8,"CLASS":9,"DECLARATION":10,"ASIGNATION":11,"IF":12,"COMMENTS":13,"WHILE":14,"DOWHILE":15,"PRINT":16,"FOR":17,"SWITCH":18,"VOID_METHOD":19,"DECLARATION2":20,"CALL_FUNCTION":21,"ASIGNATION3":22,"continue":23,";":24,"break":25,"return":26,"ERROR":27,"}":28,")":29,"{":30,"(":31,"IMPORTS":32,"class":33,"identifier":34,"INSTRUCCIONS_BLOCK_CLASS":35,"RETURN":36,"EXPRESION":37,"MY_IMPORTS":38,"IMPORT":39,"import":40,"TYPE":41,"int":42,"String":43,"boolean":44,"char":45,"double":46,"linecomment":47,"multilinecomment":48,"VALUE":49,"PARAMETERS":50,"=":51,"MORE_VALUES":52,",":53,"MORE_ELEMENTS":54,"ASIGNATION2":55,"MORE_ELEMENTS2":56,"MY_PARAMETERS":57,"PARAMETER":58,"FUNCTION_PARAMETERS":59,"MY_FUNCTION_PARAMETERS":60,"FUNCTION_PARAMETER":61,"void":62,"main":63,"if":64,"IF_CONDITION":65,"INSTRUCCIONS_BLOCK":66,"else":67,"while":68,"do":69,"for":70,"TYPE_FOR":71,"INCREMENT_DECREMENT":72,"ASIGNATION_FOR":73,"DECLARATION_FOR":74,"+":75,"-":76,"*":77,"number":78,"switch":79,"INSTRUCTION_SWITCH":80,"DEFAULT":81,"CASES":82,"CASE":83,"case":84,":":85,"default":86,"System":87,".":88,"out":89,"TYPE_PRINT":90,"print":91,"println":92,"NUMBER":93,"TYPE_NUMBER":94,"%":95,"decimal":96,"/":97,"^":98,">":99,"<":100,"==":101,"!=":102,"!":103,"||":104,"&&":105,"true":106,"false":107,"STRING_LITERAL":108,"char_literal":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"continue",24:";",25:"break",26:"return",28:"}",29:")",30:"{",31:"(",33:"class",34:"identifier",40:"import",42:"int",43:"String",44:"boolean",45:"char",46:"double",47:"linecomment",48:"multilinecomment",51:"=",53:",",62:"void",63:"main",64:"if",67:"else",68:"while",69:"do",70:"for",75:"+",76:"-",77:"*",78:"number",79:"switch",84:"case",85:":",86:"default",87:"System",88:".",89:"out",91:"print",92:"println",95:"%",96:"decimal",97:"/",98:"^",99:">",100:"<",101:"==",102:"!=",103:"!",104:"||",105:"&&",106:"true",107:"false",108:"STRING_LITERAL",109:"char_literal"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[8,2],[8,2],[8,1],[27,1],[27,1],[27,1],[27,1],[27,1],[9,4],[36,2],[36,1],[32,1],[32,0],[38,2],[38,1],[39,3],[41,1],[41,1],[41,1],[41,1],[41,1],[13,1],[13,1],[10,4],[10,11],[20,4],[49,3],[49,2],[49,0],[52,2],[52,0],[11,4],[22,4],[54,2],[56,2],[56,0],[55,3],[55,1],[50,1],[50,0],[57,2],[57,1],[58,2],[58,3],[59,1],[59,0],[60,2],[60,1],[61,1],[61,2],[19,7],[19,8],[12,3],[12,5],[12,5],[65,3],[66,3],[66,2],[35,3],[35,2],[14,3],[15,5],[17,9],[71,1],[71,1],[74,4],[73,3],[72,3],[72,3],[72,4],[18,6],[80,1],[80,0],[82,2],[82,1],[83,6],[81,3],[16,5],[90,5],[90,5],[21,5],[93,2],[94,2],[94,2],[94,1],[37,2],[37,2],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,4],[37,4],[37,3],[37,3],[37,3],[37,3],[37,2],[37,3],[37,3],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Tree($$[$0-1]); return this.$;
break;
case 2: case 4: case 42: case 69: case 75: case 102:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 5: case 43: case 70: case 76: case 103:
 this.$ = [$$[$0]]; 
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 67: case 73: case 92: case 93: case 100:
this.$ = $$[$0];
break;
case 17: case 31:
this.$ = new Exception($$[$0], "ERROR SINTACTICO: " + $$[$0] + " en linea: " + (this._$.first_line) 
                                                    + ", columna: " +  this._$.first_column, this._$.first_line, this._$.first_column)
break;
case 28:
this.$ = new Continue($$[$0-1], this._$.first_line, this._$.first_column);
break;
case 29:
this.$ = new Break($$[$0-1], this._$.first_line, this._$.first_column);
break;
case 30:
this.$ = new Return( $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 37:
this.$ = new Class($$[$0-1], $$[$0], $$[$0-3]);
break;
case 38: case 84: case 85: case 87:
this.$ = $$[$0-1];
break;
case 39: case 68: case 74: case 86: case 88: case 98: case 101:
this.$ = [];
break;
case 40: case 106: case 138: case 139:
 this.$ = $$[$0] 
break;
case 41:
 this.$ = [] 
break;
case 44:
this.$ = new Import($$[$0-1],  this._$.first_line, this._$.first_column);
break;
case 45:
this.$ = new DataType('int');
break;
case 46:
this.$ = new DataType('string');
break;
case 47:
this.$ = new DataType('boolean');
break;
case 48:
this.$ = new DataType('char');
break;
case 49:
this.$ = new DataType('double');
break;
case 50:
this.$ = new Comment('Line', this._$.first_line, this._$.first_column);
break;
case 51:
this.$ = new Comment('Multi line', this._$.first_line, this._$.first_column);
break;
case 52: case 54:
this.$ = new Declaration($$[$0-3], $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 53:
this.$ = new Function($$[$0-10], $$[$0-9], $$[$0-7], $$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column);
break;
case 55: case 111: case 112:
this.$ = $$[$0-1]
break;
case 56: case 57:
this.$ = null;
break;
case 60: case 61:
this.$ = new Assignation($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 65: case 95:
this.$ = new Assignation($$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 66:
this.$ = new Assignation($$[$0], null, this._$.first_line, this._$.first_column);
break;
case 71: case 72:
this.$ = new Declaration($$[$0-1], $$[$0], null, this._$.first_line, this._$.first_column);  
break;
case 77: case 78:
this.$ = new Identifier($$[$0], this._$.first_line, this._$.first_column);  
break;
case 79:
this.$ = new Method('void', 'main', [], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 80:
this.$ = new Method('void', $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 81:
this.$ = new If($$[$0-1], $$[$0], [], this._$.first_line, this._$.first_column);
break;
case 82:
this.$ = new If($$[$0-3], $$[$0-2], [new Else($$[$0],this._$.first_line, this._$.first_column)], this._$.first_line, this._$.first_column);
break;
case 83:
this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]], this._$.first_line, this._$.first_column);
break;
case 89:
this.$ = new While($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 90:
this.$ = new DoWhile($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 91:
this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 94:
this.$ = new Declaration($$[$0-3], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 96:
this.$ = new Increment($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 97:
this.$ = new Decrement($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 99:
this.$ = new Switch($$[$0-4], $$[$0-2], [$$[$0-1]], this._$.first_line, this._$.first_column);
break;
case 104:
this.$ = new Case($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column);
break;
case 105:
this.$ = new Default($$[$0], this._$.first_line, this._$.first_column);
break;
case 107: case 108:
this.$ = new Print($$[$0-2], this._$.first_line, this._$.first_column);
break;
case 109:
this.$ = new CallFunction($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column);
break;
case 113:
this.$ = $$[$0]
break;
case 114: case 115:
 this.$ = new ArithmeticExpression($$[$0-1], null, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 116:
 this.$ = new ArithmeticExpression($$[$0-1], null, '-', this._$.first_line, this._$.first_column); 
break;
case 117:
 this.$ = new ArithmeticExpression($$[$0-2], $$[$0], '+', this._$.first_line, this._$.first_column); 
break;
case 118:
 this.$ = new ArithmeticExpression($$[$0-2], $$[$0], '-', this._$.first_line, this._$.first_column); 
break;
case 119:
 this.$ = new ArithmeticExpression($$[$0-2], $$[$0], '*', this._$.first_line, this._$.first_column); 
break;
case 120:
 this.$ = new ArithmeticExpression($$[$0-2], $$[$0], '/', this._$.first_line, this._$.first_column); 
break;
case 121:
 this.$ = new ArithmeticExpression($$[$0-2], $$[$0], '^', this._$.first_line, this._$.first_column); 
break;
case 122:
 this.$ = new RelationalExpression($$[$0-3], $$[$0], '>' + '=',this._$.first_line, this._$.first_column); 
break;
case 123:
 this.$ = new RelationalExpression($$[$0-3], $$[$0], '<' + '=', this._$.first_line, this._$.first_column); 
break;
case 124:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '<', this._$.first_line, this._$.first_column); 
break;
case 125:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '>', this._$.first_line, this._$.first_column); 
break;
case 126:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '==', this._$.first_line, this._$.first_column); 
break;
case 127:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '!=', this._$.first_line, this._$.first_column); 
break;
case 128:
 this.$ = new LogicExpression($$[$0], null, '!', this._$.first_line, this._$.first_column); 
break;
case 129:
 this.$ = new LogicExpression($$[$0-2], $$[$0], '||', this._$.first_line, this._$.first_column); 
break;
case 130:
 this.$ = new LogicExpression($$[$0-2], $$[$0], '&&', this._$.first_line, this._$.first_column); 
break;
case 131:
 this.$ = new Expression(new DataType('double'), Number($$[$0]), this._$.first_line, this._$.first_column); 
break;
case 132:
 this.$ = new Expression(new DataType('int'), Number($$[$0]), this._$.first_line, this._$.first_column); 
break;
case 133:
 this.$ = new Expression(new DataType('boolean'), true, this._$.first_line, this._$.first_column); 
break;
case 134:
 this.$ = new Expression(new DataType('boolean'), false, this._$.first_line, this._$.first_column); 
break;
case 135:
 this.$ = new Expression(new DataType('string'), $$[$0].replace(/\"/g,""), this._$.first_line, this._$.first_column); 
break;
case 136:
 this.$ = new Expression(new DataType('char'), $$[$0].replace(/\'/g,""), this._$.first_line, this._$.first_column); 
break;
case 137:
 this.$ = new Identifier($$[$0], this._$.first_line, this._$.first_column); 
break;
case 140:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,32:16,33:$V1,34:$V2,38:28,39:34,40:$V3,41:17,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,62:$Vb,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},{1:[3]},{2:$V0,5:[1,36],6:37,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,32:16,33:$V1,34:$V2,38:28,39:34,40:$V3,41:17,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,62:$Vb,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},o($Vi,[2,3]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),{33:[1,38]},{34:[1,39]},{51:[1,40]},{31:$Vj,65:41},o($Vk,[2,50]),o($Vk,[2,51]),{31:$Vj,65:43},{30:$Vl,66:44},{88:[1,46]},{31:[1,47]},{31:$Vj,65:48},{34:[1,50],63:[1,49]},{33:[2,40],39:51,40:$V3},{34:[2,45]},{34:[2,46]},{34:[2,47]},{34:[2,48]},{34:[2,49]},o($Vm,[2,43]),{34:[1,52]},{1:[2,1]},o($Vi,[2,2]),{34:[1,53]},{24:$Vn,31:[1,55],49:54,51:$Vo,53:$Vp},{31:$Vq,34:$Vr,37:58,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{30:$Vl,66:70},{31:$Vq,34:$Vr,37:71,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{30:$Vl,66:72},{68:[1,73]},{2:$VB,7:74,8:76,12:80,13:81,14:82,15:83,16:84,17:85,18:86,20:77,21:78,22:79,23:$VC,25:$VD,26:$VE,28:[1,75],34:$VF,41:91,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},{89:[1,93]},{34:[1,97],41:98,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,71:94,73:95,74:96},{30:[1,99]},{31:[1,100]},{31:[1,101]},o($Vm,[2,42]),{24:[1,102]},{30:[1,104],35:103},{24:[1,105]},{29:$VG,41:109,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,50:106,53:$VH,57:107,58:108},{31:$Vq,34:$Vr,37:111,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{34:$VI,54:112,55:113},{24:[1,115],75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,104:$VS,105:$VT},o($VU,[2,132],{95:[1,127]}),o($VU,[2,131],{95:[1,128]}),o($VU,[2,139],{37:129,31:$Vq,34:$Vr,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA}),{31:$Vq,34:$Vr,37:130,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},o($VU,[2,133]),o($VU,[2,134]),o($VU,[2,135]),o($VU,[2,136]),o($VU,[2,137]),o($VU,[2,138]),{31:$Vq,34:$Vr,37:131,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},o($Vk,[2,81],{67:[1,132]}),{29:[1,133],75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,104:$VS,105:$VT},o($Vk,[2,89]),{31:$Vj,65:134},{2:$VB,8:136,12:80,13:81,14:82,15:83,16:84,17:85,18:86,20:77,21:78,22:79,23:$VC,25:$VD,26:$VE,28:[1,135],34:$VF,41:91,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},o($VV,[2,86]),o($VW,[2,5]),o($VW,[2,18]),o($VW,[2,19]),o($VW,[2,20]),o($VW,[2,21]),o($VW,[2,22]),o($VW,[2,23]),o($VW,[2,24]),o($VW,[2,25]),o($VW,[2,26]),o($VW,[2,27]),{24:[1,137]},{24:[1,138]},{24:$VX},o($VW,[2,31]),{34:[1,140]},{31:[1,141],51:[1,142]},{88:[1,143]},{24:[1,144]},{24:[2,92]},{24:[2,93]},{51:[1,145]},{34:[1,146]},{80:147,82:148,83:149,84:$VY,86:[2,101]},{29:[1,151]},{29:$VG,41:109,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,50:152,53:$VH,57:107,58:108},o($Vm,[2,44]),o($Vi,[2,37]),{2:$V0,4:153,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,28:[1,154],32:16,33:$V1,34:$V2,38:28,39:34,40:$V3,41:17,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,62:$Vb,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},o($Vi,[2,52]),{29:[1,155]},{29:[2,67],41:109,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,53:$VH,58:156},o($VZ,[2,70]),{34:[1,157]},{41:158,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8},{24:[2,59],52:159,53:[1,160],75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,104:$VS,105:$VT},{24:[2,56]},{24:[2,64],53:[1,162],56:161},o($V_,[2,66],{51:[1,163]}),o($Vi,[2,60]),{31:$Vq,34:$Vr,37:164,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{31:$Vq,34:$Vr,37:165,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{31:$Vq,34:$Vr,37:166,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{31:$Vq,34:$Vr,37:167,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{31:$Vq,34:$Vr,37:168,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{31:$Vq,34:$Vr,37:170,51:[1,169],75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{31:$Vq,34:$Vr,37:172,51:[1,171],75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{31:$Vq,34:$Vr,37:173,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{31:$Vq,34:$Vr,37:174,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{31:$Vq,34:$Vr,37:175,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{31:$Vq,34:$Vr,37:176,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},o($VU,[2,114]),o($VU,[2,115]),o($VU,[2,116]),o($VU,[2,128]),{29:[1,177],75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,104:$VS,105:$VT},{12:179,30:$Vl,64:$Vc,66:178},o([24,30],[2,84]),{24:[1,180]},o($VV,[2,85]),o($VW,[2,4]),o($VW,[2,28]),o($VW,$V$),o($VW,[2,30]),{24:$Vn,49:181,51:$Vo,53:$Vp},{29:[2,74],34:$V01,53:$V11,59:182,60:183,61:184},{31:$Vq,34:$Vr,37:187,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{90:188,91:[1,189],92:[1,190]},{31:$Vq,34:$Vr,37:191,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{31:$Vq,34:$Vr,37:192,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{51:[1,193]},{81:194,86:[1,195]},{83:196,84:$VY,86:[2,100]},o($V21,[2,103]),{31:$Vq,34:$Vr,37:197,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{30:[1,198]},{29:[1,199]},{2:$V0,6:37,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,28:[1,200],32:16,33:$V1,34:$V2,38:28,39:34,40:$V3,41:17,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,62:$Vb,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},o($Vi,[2,88]),{30:[1,201]},o($VZ,[2,69]),o($VZ,[2,71]),{34:[1,202]},{24:[2,55]},{34:$VI,54:203,55:113},{24:[2,62]},{34:$VI,54:204,55:113},{31:$Vq,34:$Vr,37:205,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},o($V31,[2,117],{77:$VL,97:$VM,98:$VN}),o($V31,[2,118],{77:$VL,97:$VM,98:$VN}),o($VU,[2,119]),o($VU,[2,120]),o($VU,[2,121]),{31:$Vq,34:$Vr,37:206,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},o($V41,[2,125],{75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN}),{31:$Vq,34:$Vr,37:207,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},o($V41,[2,124],{75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN}),o($V51,[2,126],{75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP}),o($V51,[2,127],{75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP}),o([24,29,53,85,104],[2,129],{75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,105:$VT}),o([24,29,53,85,104,105],[2,130],{75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR}),o($VU,[2,140]),o($Vk,[2,82]),o($Vk,[2,83]),o($Vk,[2,90]),{24:[1,208]},{29:[1,209]},{29:[2,73],34:$V01,53:$V11,61:210},o($V61,[2,76]),o($V61,[2,77]),{34:[1,211]},{24:[1,212],75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,104:$VS,105:$VT},o($Vk,[2,106]),{31:[1,213]},{31:[1,214]},{24:[1,215],75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,104:$VS,105:$VT},{24:[2,95],75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,104:$VS,105:$VT},{31:$Vq,34:$Vr,37:216,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{28:[1,217]},{85:[1,218]},o($V21,[2,102]),{75:$VJ,76:$VK,77:$VL,85:[1,219],97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,104:$VS,105:$VT},{2:$VB,7:220,8:76,12:80,13:81,14:82,15:83,16:84,17:85,18:86,20:77,21:78,22:79,23:$VC,25:$VD,26:$VE,34:$VF,41:91,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},{30:[1,221]},o($Vi,[2,87]),{2:$VB,7:222,8:76,12:80,13:81,14:82,15:83,16:84,17:85,18:86,20:77,21:78,22:79,23:$VC,25:$VD,26:$VE,34:$VF,41:91,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},o($VZ,[2,72]),{24:[2,58]},{24:[2,63]},o($V_,[2,65],{75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,104:$VS,105:$VT}),o($V41,[2,122],{75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN}),o($V41,[2,123],{75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN}),o($VW,[2,54]),{24:[1,223]},o($V61,[2,75]),o($V61,[2,78]),o($VW,[2,61]),{31:$Vq,34:$Vr,37:224,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{31:$Vq,34:$Vr,37:225,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{34:[1,227],72:226},{24:[2,94],75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,104:$VS,105:$VT},o($Vk,[2,99]),{2:$VB,7:228,8:76,12:80,13:81,14:82,15:83,16:84,17:85,18:86,20:77,21:78,22:79,23:$VC,25:$VD,26:$VE,34:$VF,41:91,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},{2:$VB,7:229,8:76,12:80,13:81,14:82,15:83,16:84,17:85,18:86,20:77,21:78,22:79,23:$VC,25:$VD,26:$VE,34:$VF,41:91,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},{2:$VB,8:136,12:80,13:81,14:82,15:83,16:84,17:85,18:86,20:77,21:78,22:79,23:$VC,25:$VD,26:$VE,28:[1,230],34:$VF,41:91,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},{2:$VB,7:231,8:76,12:80,13:81,14:82,15:83,16:84,17:85,18:86,20:77,21:78,22:79,23:$VC,25:$VD,26:$VE,34:$VF,41:91,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},{2:$VB,8:136,12:80,13:81,14:82,15:83,16:84,17:85,18:86,20:77,21:78,22:79,23:$VC,25:$VD,26:[1,232],34:$VF,41:91,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},o($VW,[2,109]),{29:[1,233],75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,104:$VS,105:$VT},{29:[1,234],75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,104:$VS,105:$VT},{29:[1,235]},{75:[1,236],76:[1,237],77:[1,238]},{2:$VB,8:136,12:80,13:81,14:82,15:83,16:84,17:85,18:86,20:77,21:78,22:79,23:$VC,25:$VD,26:$VE,28:[2,105],34:$VF,41:91,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},{2:$VB,8:136,12:80,13:81,14:82,15:83,16:84,17:85,18:86,20:77,21:78,22:79,23:$VC,25:[1,239],26:$VE,34:$VF,41:91,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},o($Vi,[2,79]),{2:$VB,8:136,12:80,13:81,14:82,15:83,16:84,17:85,18:86,20:77,21:78,22:79,23:$VC,25:$VD,26:$VE,28:[1,240],34:$VF,41:91,42:$V4,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,48:$Va,64:$Vc,68:$Vd,69:$Ve,70:$Vf,79:$Vg,87:$Vh},{24:$VX,31:$Vq,34:$Vr,37:241,75:$Vs,76:$Vt,78:$Vu,96:$Vv,103:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA},{24:[1,242]},{24:[1,243]},{30:$Vl,66:244},{75:[1,245]},{76:[1,246]},{76:[1,247]},{24:[1,248]},o($Vi,[2,80]),{24:[1,249],75:$VJ,76:$VK,77:$VL,97:$VM,98:$VN,99:$VO,100:$VP,101:$VQ,102:$VR,104:$VS,105:$VT},o($Vk,[2,107]),o($Vk,[2,108]),o($Vk,[2,91]),{29:[2,96]},{29:[2,97]},{78:[1,250]},o([2,23,25,26,34,42,43,44,45,46,47,48,64,68,69,70,79,87],$V$,{84:$V71,86:$V71}),{28:[1,251]},{29:[2,98]},o($Vi,[2,53])],
defaultActions: {29:[2,45],30:[2,46],31:[2,47],32:[2,48],33:[2,49],36:[2,1],95:[2,92],96:[2,93],112:[2,56],159:[2,55],161:[2,62],203:[2,58],204:[2,63],245:[2,96],246:[2,97],250:[2,98]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Tree}                    = require('./components/Tree');
    const {DataType}                = require('./components/DataType');
    const {Declaration}             = require('./components/Declaration');
    const {Assignation}             = require('./components/Assignation');
    const {Expression}              = require('./components/Expression');
    const {Class}                   = require('./components/Class');
    const {Import}                  = require('./components/Import');
    const {If}                      = require('./components/If');
    const {Else}                    = require('./components/Else');
    const {Identifier}              = require('./components/Identifier');
    const {Switch}                  = require('./components/Switch');
    const {Case}                    = require('./components/Case');
    const {Default}                 = require('./components/Default');
    const {While}                   = require('./components/While');
    const {DoWhile}                 = require('./components/DoWhile');
    const {For}                     = require('./components/For');
    const {Increment}               = require('./components/Increment');
    const {Decrement}               = require('./components/Decrement');
    const {Break}                   = require('./components/Break');
    const {Continue}                = require('./components/Continue');
    const {Return}                  = require('./components/Return');
    const {Comment}                 = require('./components/Comment');
    const {Function}                = require('./components/Function');
    const {Print}                   = require('./components/Print');
    const {CallFunction}            = require('./components/CallFunction');
    const {ArithmeticExpression}    = require('./components/ArithmeticExpression');
    const {LogicExpression}         = require('./components/LogicExpression');
    const {RelationalExpression}    = require('./components/RelationalExpression');
    const {Exception}               = require('./components/Exception');
    const {Method}                  = require('./components/Method');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 96 
break;
case 2:return 78 
break;
case 3:return 108
break;
case 4:return 48
break;
case 5:return 109
break;
case 6:return 47
break;
case 7:return 77
break;
case 8:return 97
break;
case 9:return 24
break;
case 10:return 85
break;
case 11:return 88
break;
case 12:return 76
break;
case 13:return 75
break;
case 14:return 77
break;
case 15:return 98
break;
case 16:return 95
break;
case 17:return 100
break;
case 18:return 99
break;
case 19:return 101
break;
case 20:return 102
break;
case 21:return '++'
break;
case 22:return '--'
break;
case 23:return 104
break;
case 24:return 105
break;
case 25:return 103
break;
case 26:return 51
break;
case 27:return 53
break;
case 28:return 31
break;
case 29:return 29  
break;
case 30:return '['
break;
case 31:return ']'
break;
case 32:return 30
break;
case 33:return 28
break;
case 34:return 40
break;
case 35:return 33
break;
case 36:return 87  
break;
case 37:return 89  
break;
case 38:return 92  
break;
case 39:return 70  
break;
case 40:return 106
break;
case 41:return 107
break;
case 42:return 91
break;
case 43:return 63
break;
case 44:return 64
break;
case 45:return 67
break;
case 46:return 25
break;
case 47:return 23
break;
case 48:return 26
break;
case 49:return 79
break;
case 50:return 86
break;
case 51:return 84
break;
case 52:return 62  
break;
case 53:return 69
break;
case 54:return 68
break;
case 55:return 42
break;
case 56:return 43
break;
case 57:return 44
break;
case 58:return 45
break;
case 59:return 46
break;
case 60:return 34
break;
case 61:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:([0-9][0-9]*\.[0-9][0-9]*))/i,/^(?:([0-9]+))/i,/^(?:(("[^"]*")))/i,/^(?:(\/\*(.|\n|\r)*?\*\/))/i,/^(?:(('[a-zA-Z_]')))/i,/^(?:((\/\/)(\/)*(.|(([a-zA-Z_])[a-zA-Z0-9_]*)|([0-9]+)|([0-9][0-9]*\.[0-9][0-9]*)|(("[^"]*")))*))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:import\b)/i,/^(?:class\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:println\b)/i,/^(?:for\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:void\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:int\b)/i,/^(?:String\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}