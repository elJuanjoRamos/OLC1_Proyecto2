/* parser generated by jison 0.0.0 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,15],$V2=[1,16],$V3=[1,17],$V4=[1,21],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,34],$V9=[1,35],$Va=[1,36],$Vb=[1,23],$Vc=[1,24],$Vd=[1,30],$Ve=[1,22],$Vf=[1,25],$Vg=[1,26],$Vh=[1,28],$Vi=[1,29],$Vj=[1,27],$Vk=[2,5,20,22,23,28,34,37,39,40,41,42,43,44,45,59,61,65,66,67,76,83],$Vl=[1,43],$Vm=[1,53],$Vn=[1,52],$Vo=[1,44],$Vp=[1,47],$Vq=[1,45],$Vr=[1,46],$Vs=[1,48],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[1,59],$Vx=[1,62],$Vy=[2,19],$Vz=[1,70],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,74],$VE=[1,75],$VF=[1,76],$VG=[1,77],$VH=[1,78],$VI=[1,79],$VJ=[1,80],$VK=[1,81],$VL=[2,5,20,21,22,23,28,29,34,37,39,40,41,42,43,44,45,50,59,61,65,66,67,72,73,74,76,80,83,90,91,92,93,94,95,96,98,99],$VM=[1,89],$VN=[1,88],$VO=[1,90],$VP=[1,114],$VQ=[1,111],$VR=[1,112],$VS=[1,113],$VT=[1,116],$VU=[2,5,20,21,22,23,28,29,34,37,39,40,41,42,43,44,45,50,59,61,65,66,67,72,73,76,80,83,91,92,93,94,95,96,98,99],$VV=[2,70],$VW=[1,147],$VX=[2,78],$VY=[1,151],$VZ=[2,5,20,22,23,28,34,37,39,40,41,42,43,44,45,59,61,64,65,66,67,76,83],$V_=[2,20,22,23,28,34,39,40,41,42,43,44,45,61,65,66,67,76,83],$V$=[1,167],$V01=[2,5,20,21,22,23,28,29,34,37,39,40,41,42,43,44,45,50,59,61,65,66,67,76,80,83,91,92,93,94,95,96,98,99],$V11=[2,5,20,21,22,23,28,29,34,37,39,40,41,42,43,44,45,50,59,61,65,66,67,76,80,83,93,96,98,99],$V21=[2,5,20,21,22,23,28,34,37,39,40,41,42,43,44,45,59,61,65,66,67,76,83],$V31=[2,5,20,21,22,23,28,34,37,39,40,41,42,43,44,45,50,59,61,65,66,67,76,83],$V41=[2,73],$V51=[1,200];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONS":4,"EOF":5,"DECLARATION_TYPE":6,"INSTRUCCIONS2":7,"DECLARATION_TYPE_FUNCTION":8,"CLASS":9,"DECLARATION":10,"ASIGNATION":11,"IF":12,"COMMENTS":13,"WHILE":14,"DOWHILE":15,"PRINT":16,"FOR":17,"SWITCH":18,"VOID_METHOD":19,"continue":20,";":21,"break":22,"return":23,"RETURN":24,"DECLARATION2":25,"ASIGNATION3":26,"ERROR":27,"}":28,")":29,"{":30,"(":31,"IMPORT":32,"class":33,"identifier":34,"EXPRESION":35,"IMPORTS":36,"import":37,"TYPE":38,"int":39,"String":40,"boolean":41,"char":42,"double":43,"linecomment":44,"multilinecomment":45,"VALUE":46,"PARAMETERS":47,"=":48,"MORE_VALUES":49,",":50,"MORE_ELEMENTS":51,"FUNCTION_PARAMETERS":52,"ASIGNATION2":53,"MORE_ELEMENTS2":54,"PARAMETER":55,"MORE_PARAMETER":56,"FUNCTION_PARAMETER":57,"MORE_FUNCTION_PARAMETER":58,"void":59,"main":60,"if":61,"IF_CONDITION":62,"INSTRUCCIONS_BLOCK":63,"else":64,"while":65,"do":66,"for":67,"TYPE_FOR":68,"INCREMENT_DECREMENT":69,"ASIGNATION_FOR":70,"DECLARATION_FOR":71,"+":72,"-":73,"*":74,"number":75,"switch":76,"CASE":77,"DEFAULT":78,"case":79,":":80,"MORE_CASES":81,"default":82,"System":83,".":84,"out":85,"TYPE_PRINT":86,"print":87,"println":88,"CALL_FUNCTION":89,"/":90,">=":91,"<":92,"==":93,">":94,"<=":95,"!=":96,"!":97,"||":98,"&&":99,"decimal":100,"true":101,"false":102,"STRING_LITERAL":103,"char_literal":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"continue",21:";",22:"break",23:"return",28:"}",29:")",30:"{",31:"(",33:"class",34:"identifier",37:"import",39:"int",40:"String",41:"boolean",42:"char",43:"double",44:"linecomment",45:"multilinecomment",48:"=",50:",",59:"void",60:"main",61:"if",64:"else",65:"while",66:"do",67:"for",72:"+",73:"-",74:"*",75:"number",76:"switch",79:"case",80:":",82:"default",83:"System",84:".",85:"out",87:"print",88:"println",90:"/",91:">=",92:"<",93:"==",94:">",95:"<=",96:"!=",97:"!",98:"||",99:"&&",100:"decimal",101:"true",102:"false",103:"STRING_LITERAL",104:"char_literal"},
productions_: [0,[3,0],[3,2],[4,2],[4,1],[7,2],[7,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[8,2],[8,2],[8,1],[27,1],[27,1],[27,1],[27,1],[27,1],[9,6],[24,2],[24,1],[36,2],[36,1],[32,3],[38,1],[38,1],[38,1],[38,1],[38,1],[13,1],[13,1],[10,3],[10,8],[25,3],[46,3],[46,1],[46,2],[49,1],[49,3],[11,4],[11,5],[26,4],[51,2],[54,2],[54,0],[53,3],[53,1],[47,1],[47,0],[55,3],[56,4],[56,0],[52,1],[57,2],[57,0],[58,3],[58,0],[19,8],[19,8],[12,3],[12,5],[12,5],[62,3],[63,3],[63,2],[14,3],[15,5],[17,9],[68,1],[68,1],[71,4],[70,3],[69,3],[69,3],[69,4],[18,6],[77,7],[81,1],[81,0],[78,3],[16,5],[86,5],[86,5],[89,5],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,3],[35,3],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = ''; console.log("empty"); 
break;
case 2:
this.$ = new Tree($$[$0-1]); return this.$;
break;
case 3: case 5: case 43:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: case 6:
 this.$ = [$$[$0]]; 
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 44: case 74: case 90: case 91:
this.$ = $$[$0];
break;
case 18: case 31:
this.$ = new Continue($$[$0-1], this._$.first_line, this._$.first_column);
break;
case 19: case 32:
this.$ = new Break($$[$0-1], this._$.first_line, this._$.first_column);
break;
case 20: case 33:
this.$ = new Return( $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 21: case 34:
this.$ = new Exception(yytext, "ERROR SINTACTICO: " + yytext + " en linea: " + (this._$.first_line - 1) 
                                                    + ", columna: " +  this._$.last_column, this._$.first_line, this._$.first_column)
break;
case 40:
this.$ = new Class($$[$0-3], $$[$0-1], $$[$0-5]);
break;
case 41: case 84: case 85:
this.$ = $$[$0-1];
break;
case 42: case 86: case 96:
this.$ = [];
break;
case 45:
this.$ = new Import($$[$0-1],  this._$.first_line, this._$.first_column);
break;
case 46:
this.$ = new DataType('int');
break;
case 47:
this.$ = new DataType('string');
break;
case 48:
this.$ = new DataType('boolean');
break;
case 49:
this.$ = new DataType('char');
break;
case 50:
this.$ = new DataType('double');
break;
case 51:
this.$ = new Comment('Line', this._$.first_line, this._$.first_column);
break;
case 52:
this.$ = new Comment('Multi line', this._$.first_line, this._$.first_column);
break;
case 53: case 55:
this.$ = new Declaration($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 54:
this.$ = new Function($$[$0-7], $$[$0-6], [$$[$0-4]], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 56:
this.$ = $$[$0-1]
break;
case 57: case 58: case 70: case 76:
this.$ = null;
break;
case 61: case 63:
this.$ = new Assignation($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 62:
this.$ = new CallFunction($$[$0-4], [$$[$0-2]], this._$.first_line, this._$.first_column);
break;
case 67: case 93:
this.$ = new Assignation($$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 68:
this.$ = new Assignation($$[$0], null, this._$.first_line, this._$.first_column);
break;
case 71:
this.$ = new Declaration($$[$0-2], $$[$0-1], null, this._$.first_line, this._$.first_column);
break;
case 75:
this.$ = new Identifier($$[$0-1], this._$.first_line, this._$.first_column);
break;
case 79:
this.$ = new Function('void', 'main', [$$[$0-4]], $$[$0-2], this._$.first_line, this._$.first_column);
break;
case 80:
this.$ = new Function('void', $$[$0-6], [$$[$0-4]], $$[$0-2], this._$.first_line, this._$.first_column);
break;
case 81:
this.$ = new If($$[$0-1], $$[$0], [], this._$.first_line, this._$.first_column);
break;
case 82:
this.$ = new If($$[$0-3], $$[$0-2], new Else($$[$0],this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column);
break;
case 83:
this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]], this._$.first_line, this._$.first_column);
break;
case 87:
this.$ = new While($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 88:
this.$ = new DoWhile($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 89:
this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 92:
this.$ = new Declaration($$[$0-3], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 94:
this.$ = new Increment($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 95:
this.$ = new Decrement($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 97:
this.$ = new Switch($$[$0-4], [$$[$0-2]], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 98:
this.$ = new Case($$[$0-5], $$[$0-3], this._$.first_line, this._$.first_column);
break;
case 101:
this.$ = new Default($$[$0], this._$.first_line, this._$.first_column);
break;
case 103: case 104:
this.$ = new Print($$[$0-2], this._$.first_line, this._$.first_column);
break;
case 106:
 this.$ = new ArithmeticExpression($$[$0-1], null, '-', this._$.first_line, this._$.first_column); 
break;
case 107:
 this.$ = new ArithmeticExpression($$[$0-2], $$[$0], '+', this._$.first_line, this._$.first_column); 
break;
case 108:
 this.$ = new ArithmeticExpression($$[$0-2], $$[$0], '-', this._$.first_line, this._$.first_column); 
break;
case 109:
 this.$ = new ArithmeticExpression($$[$0-2], $$[$0], '*', this._$.first_line, this._$.first_column); 
break;
case 110:
 this.$ = new ArithmeticExpression($$[$0-2], $$[$0], '/', this._$.first_line, this._$.first_column); 
break;
case 111:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '>=', this._$.first_line, this._$.first_column); 
break;
case 112:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '<', this._$.first_line, this._$.first_column); 
break;
case 113:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '==', this._$.first_line, this._$.first_column); 
break;
case 114:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '>', this._$.first_line, this._$.first_column); 
break;
case 115:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '<=', this._$.first_line, this._$.first_column); 
break;
case 116:
 this.$ = new RelationalExpression($$[$0-2], $$[$0], '!=', this._$.first_line, this._$.first_column); 
break;
case 117:
 this.$ = new LogicExpression($$[$0], null, '!', this._$.first_line, this._$.first_column); 
break;
case 118:
 this.$ = new LogicExpression($$[$0-2], $$[$0], '&&', this._$.first_line, this._$.first_column); 
break;
case 119:
 this.$ = new LogicExpression($$[$0-2], $$[$0], '||', this._$.first_line, this._$.first_column); 
break;
case 120: case 121:
 this.$ = new Expression(new DataType('int'), Number($$[$0]), this._$.first_line, this._$.first_column); 
break;
case 122:
 this.$ = new Expression(new DataType('boolean'), true, this._$.first_line, this._$.first_column); 
break;
case 123:
 this.$ = new Expression(new DataType('boolean'), false, this._$.first_line, this._$.first_column); 
break;
case 124:
 this.$ = new Expression(new DataType('string'), $$[$0].replace(/\"/g,""), this._$.first_line, this._$.first_column); 
break;
case 125:
 this.$ = new Expression(new DataType('char'), $$[$0].replace(/\'/g,""), this._$.first_line, this._$.first_column); 
break;
case 126:
 this.$ = new Identifier($$[$0], this._$.first_line, this._$.first_column); 
break;
case 127:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{1:[2,1],2:$V0,3:1,4:2,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:$V3,32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},{1:[3]},{2:$V0,5:[1,37],6:38,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:$V3,32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},o($Vk,[2,4]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),{21:[1,39]},{21:[1,40]},{21:$Vl,24:41,31:$Vm,34:$Vn,35:42,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($Vk,[2,21]),{33:[1,54]},{34:[1,55]},{31:[1,57],48:[1,56]},{31:$Vw,62:58},o($Vk,[2,51]),o($Vk,[2,52]),{31:$Vw,62:60},{30:$Vx,63:61},{84:[1,63]},{31:[1,64]},{31:$Vw,62:65},{34:[1,67],60:[1,66]},{34:[1,68]},{34:[2,46]},{34:[2,47]},{34:[2,48]},{34:[2,49]},{34:[2,50]},{1:[2,2]},o($Vk,[2,3]),o($Vk,[2,18]),o($Vk,$Vy),o($Vk,[2,20]),{21:[1,69],72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,98:$VJ,99:$VK},o($Vk,[2,42]),{31:$Vm,34:$Vn,35:82,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:83,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($VL,[2,120]),o($VL,[2,121]),o($VL,[2,122]),o($VL,[2,123]),o($VL,[2,124]),o($VL,[2,125]),o($VL,[2,126]),{31:$Vm,34:$Vn,35:84,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{34:[1,85]},{21:$VM,31:[1,87],46:86,48:$VN,50:$VO},{31:$Vm,34:$Vn,35:91,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{29:[2,76],34:[1,94],52:92,57:93},{30:$Vx,63:95},{31:$Vm,34:$Vn,35:96,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{30:$Vx,63:97},{65:[1,98]},{2:$VP,7:99,8:101,12:104,13:105,14:106,15:107,16:108,17:109,18:110,20:$VQ,22:$VR,23:$VS,25:102,26:103,28:[1,100],34:$VT,38:115,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},{85:[1,117]},{34:[1,121],38:122,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,68:118,70:119,71:120},{30:[1,123]},{31:[1,124]},{31:[1,125]},{21:[1,126]},o($Vk,[2,41]),{31:$Vm,34:$Vn,35:127,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:128,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:129,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:130,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:131,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:132,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:133,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:134,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:135,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:136,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:137,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:138,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($VU,[2,106],{74:$VB,90:$VC}),o($VL,[2,117]),{29:[1,139],72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,98:$VJ,99:$VK},{30:[1,140]},o($Vk,[2,53]),{29:$VV,38:143,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,47:141,55:142},{31:$Vm,34:$Vn,35:144,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($Vk,[2,57]),{34:$VW,51:145,53:146},{21:[1,148],72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,98:$VJ,99:$VK},{29:[1,149]},{29:[2,74]},{29:$VX,50:$VY,58:150},o($Vk,[2,81],{64:[1,152]}),{29:[1,153],72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,98:$VJ,99:$VK},o($Vk,[2,87]),{31:$Vw,62:154},{2:$VP,8:156,12:104,13:105,14:106,15:107,16:108,17:109,18:110,20:$VQ,22:$VR,23:$VS,25:102,26:103,28:[1,155],34:$VT,38:115,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},o($VZ,[2,86]),o($V_,[2,6]),o($V_,[2,22]),o($V_,[2,23]),o($V_,[2,24]),o($V_,[2,25]),o($V_,[2,26]),o($V_,[2,27]),o($V_,[2,28]),o($V_,[2,29]),o($V_,[2,30]),{21:[1,157]},{21:[1,158]},{21:$Vl,24:159,31:$Vm,34:$Vn,35:42,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($V_,[2,34]),{34:[1,160]},{48:[1,161]},{84:[1,162]},{21:[1,163]},{21:[2,90]},{21:[2,91]},{48:[1,164]},{34:[1,165]},{77:166,79:$V$},{29:$VV,38:143,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,47:168,55:142},{29:$VV,38:143,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,47:169,55:142},{33:[2,45]},o($VU,[2,107],{74:$VB,90:$VC}),o($VU,[2,108],{74:$VB,90:$VC}),o($VL,[2,109]),o($VL,[2,110]),o($V01,[2,111],{72:$Vz,73:$VA,74:$VB,90:$VC}),o($V01,[2,112],{72:$Vz,73:$VA,74:$VB,90:$VC}),o($V11,[2,113],{72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,94:$VG,95:$VH}),o($V01,[2,114],{72:$Vz,73:$VA,74:$VB,90:$VC}),o($V01,[2,115],{72:$Vz,73:$VA,74:$VB,90:$VC}),o($V11,[2,116],{72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,94:$VG,95:$VH}),o([2,5,20,21,22,23,28,29,34,37,39,40,41,42,43,44,45,50,59,61,65,66,67,76,80,83,98],[2,118],{72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,99:$VK}),o([2,5,20,21,22,23,28,29,34,37,39,40,41,42,43,44,45,50,59,61,65,66,67,76,80,83,98,99],[2,119],{72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI}),o($VL,[2,127]),{2:$V0,4:170,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:$V3,32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},{29:[1,171]},{29:[2,69]},{34:[1,172]},{21:[1,174],49:173,50:[1,175],72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,98:$VJ,99:$VK},o($Vk,[2,58]),o($V21,[2,66],{54:176,50:[1,177]}),o($V31,[2,68],{48:[1,178]}),o($Vk,[2,61]),{21:[1,179]},{29:[2,75]},{34:[1,180]},{12:182,30:$Vx,61:$Ve,63:181},o([21,30],[2,84]),{21:[1,183]},o($VZ,[2,85]),o($V_,[2,5]),o($V_,[2,31]),o($V_,[2,32]),o($V_,[2,33]),{21:$VM,46:184,48:$VN,50:$VO},{31:$Vm,34:$Vn,35:185,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{86:186,87:[1,187],88:[1,188]},{31:$Vm,34:$Vn,35:189,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:190,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{48:[1,191]},{78:192,82:[1,193]},{31:$Vm,34:$Vn,35:194,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{29:[1,195]},{29:[1,196]},{2:$V0,6:38,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:$V3,28:[1,197],32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},{30:[1,198]},{29:$V41,50:$V51,56:199},o($Vk,[2,56]),o($Vk,[2,59]),{34:$VW,51:201,53:146},o($V21,[2,64]),{34:$VW,51:202,53:146},{31:$Vm,34:$Vn,35:203,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($Vk,[2,62]),{29:$VX,50:$VY,58:204},o($Vk,[2,82]),o($Vk,[2,83]),o($Vk,[2,88]),o($V_,[2,55]),{21:[1,205],72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,98:$VJ,99:$VK},o($Vk,[2,102]),{31:[1,206]},{31:[1,207]},{21:[1,208],72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,98:$VJ,99:$VK},{21:[2,93],72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,98:$VJ,99:$VK},{31:$Vm,34:$Vn,35:209,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{28:[1,210]},{80:[1,211]},{72:$Vz,73:$VA,74:$VB,80:[1,212],90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,98:$VJ,99:$VK},{30:[1,213]},{30:[1,214]},o($Vk,[2,40]),{2:$V0,4:215,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:$V3,32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},{29:[2,71]},{38:216,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va},{21:[1,217]},o($V21,[2,65]),o($V31,[2,67],{72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,98:$VJ,99:$VK}),{29:[2,77]},o($V_,[2,63]),{31:$Vm,34:$Vn,35:218,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{31:$Vm,34:$Vn,35:219,73:$Vo,75:$Vp,97:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{34:[1,221],69:220},{21:[2,92],72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,98:$VJ,99:$VK},o($Vk,[2,97]),{2:$V0,4:222,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:$V3,32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},{2:$V0,4:223,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:$V3,32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},{2:$V0,4:224,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:$V3,32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},{2:$V0,4:225,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:$V3,32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},{2:$V0,6:38,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:$V3,28:[1,226],32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},{34:[1,227]},o($Vk,[2,60]),{29:[1,228],72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,98:$VJ,99:$VK},{29:[1,229],72:$Vz,73:$VA,74:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,98:$VJ,99:$VK},{29:[1,230]},{72:[1,231],73:[1,232],74:[1,233]},{2:$V0,6:38,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:$V3,28:[2,101],32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},{2:$V0,6:38,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:[1,234],23:$V3,32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},{2:$V0,6:38,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:$V3,28:[1,235],32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},{2:$V0,6:38,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:$V3,28:[1,236],32:19,34:$V4,37:$V5,38:20,39:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,59:$Vd,61:$Ve,65:$Vf,66:$Vg,67:$Vh,76:$Vi,83:$Vj},o($Vk,[2,54]),{29:$V41,50:$V51,56:237},{21:[1,238]},{21:[1,239]},{30:$Vx,63:240},{72:[1,241]},{73:[1,242]},{73:[1,243]},{21:[1,244]},o($Vk,[2,79]),o($Vk,[2,80]),{29:[2,72]},o($Vk,[2,103]),o($Vk,[2,104]),o($Vk,[2,89]),{29:[2,94]},{29:[2,95]},{75:[1,245]},o([2,20,22,23,34,37,39,40,41,42,43,44,45,59,61,65,66,67,76,83],$Vy,{81:246,77:247,79:$V$,82:[2,100]}),{29:[2,96]},{82:[2,98]},{82:[2,99]}],
defaultActions: {32:[2,46],33:[2,47],34:[2,48],35:[2,49],36:[2,50],37:[2,2],93:[2,74],119:[2,90],120:[2,91],126:[2,45],142:[2,69],150:[2,75],199:[2,71],204:[2,77],237:[2,72],241:[2,94],242:[2,95],245:[2,96],246:[2,98],247:[2,99]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Tree}                    = require('./components/Tree');
    const {DataType}                = require('./components/DataType');
    const {Declaration}             = require('./components/Declaration');
    const {Assignation}             = require('./components/Assignation');
    const {Expression}              = require('./components/Expression');
    const {Class}                   = require('./components/Class');
    const {Import}                  = require('./components/Import');
    const {If}                      = require('./components/If');
    const {Else}                      = require('./components/Else');
    const {Identifier}              = require('./components/Identifier');
    const {Switch}                  = require('./components/Switch');
    const {Case}                    = require('./components/Case');
    const {Default}                 = require('./components/Default');
    const {While}                   = require('./components/While');
    const {DoWhile}                 = require('./components/DoWhile');
    const {For}                     = require('./components/For');
    const {Increment}               = require('./components/Increment');
    const {Decrement}               = require('./components/Decrement');
    const {Break}                   = require('./components/Break');
    const {Continue}                = require('./components/Continue');
    const {Return}                  = require('./components/Return');
    const {Comment}                 = require('./components/Comment');
    const {Function}                = require('./components/Function');
    const {Print}                   = require('./components/Print');
    const {CallFunction}            = require('./components/CallFunction');
    const {ArithmeticExpression}    = require('./components/ArithmeticExpression');
    const {LogicExpression}         = require('./components/LogicExpression');
    const {RelationalExpression}    = require('./components/RelationalExpression');
    const {Exception}               = require('./components/Exception');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 75 
break;
case 2:return 100 
break;
case 3:return 103
break;
case 4:return 45
break;
case 5:return 104
break;
case 6:return 44
break;
case 7:return 74
break;
case 8:return 90
break;
case 9:return 21
break;
case 10:return 80
break;
case 11:return 84
break;
case 12:return 73
break;
case 13:return 72
break;
case 14:return 74
break;
case 15:return 92
break;
case 16:return 94
break;
case 17:return 95
break;
case 18:return 91
break;
case 19:return 93
break;
case 20:return 96
break;
case 21:return 98
break;
case 22:return 99
break;
case 23:return 97
break;
case 24:return 48
break;
case 25:return 50
break;
case 26:return 31
break;
case 27:return 29  
break;
case 28:return '['
break;
case 29:return ']'
break;
case 30:return 30
break;
case 31:return 28
break;
case 32:return 37
break;
case 33:return 33
break;
case 34:return 83  
break;
case 35:return 85  
break;
case 36:return 88  
break;
case 37:return 67  
break;
case 38:return 101
break;
case 39:return 102
break;
case 40:return 87
break;
case 41:return 60
break;
case 42:return 61
break;
case 43:return 64
break;
case 44:return 22
break;
case 45:return 20
break;
case 46:return 23
break;
case 47:return 76
break;
case 48:return 82
break;
case 49:return 79
break;
case 50:return 59  
break;
case 51:return 66
break;
case 52:return 65
break;
case 53:return 39
break;
case 54:return 40
break;
case 55:return 41
break;
case 56:return 42
break;
case 57:return 43
break;
case 58:return 34
break;
case 59:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:([0-9]+))/i,/^(?:([0-9]+\.[0-9]+))/i,/^(?:(("[^"]*")))/i,/^(?:(\/\*(.|\n|\r)*?\*\/))/i,/^(?:(('[^"]*')))/i,/^(?:(\/\/(.|(([a-zA-Z_])[a-zA-Z0-9_]*)|{NUMBER}|([0-9]+\.[0-9]+))*?))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:import\b)/i,/^(?:class\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:println\b)/i,/^(?:for\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:void\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:int\b)/i,/^(?:String\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}